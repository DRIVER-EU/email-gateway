/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Mail server
 * Mailserver API description
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AddMailAccountResult
 */
export interface AddMailAccountResult {
    /**
     * 
     * @type {string}
     * @memberof AddMailAccountResult
     */
    Msg: string;
}

/**
 * 
 * @export
 * @interface DeleteMailAccountResult
 */
export interface DeleteMailAccountResult {
    /**
     * 
     * @type {string}
     * @memberof DeleteMailAccountResult
     */
    Msg: string;
}

/**
 * 
 * @export
 * @interface MailAccountsResult
 */
export interface MailAccountsResult {
    /**
     * 
     * @type {Array<string>}
     * @memberof MailAccountsResult
     */
    Accounts: Array<string>;
}

/**
 * 
 * @export
 * @interface ResetResult
 */
export interface ResetResult {
    /**
     * 
     * @type {string}
     * @memberof ResetResult
     */
    Msg: string;
}


/**
 * MailManagementApi - fetch parameter creator
 * @export
 */
export const MailManagementApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add mail account to mail server (e.g. \"user@world.com\") 
         * @summary Add mail account
         * @param {string} Password The mail account password
         * @param {string} Account The mail account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccount(Password: string, Account: string, options: any = {}): FetchArgs {
            // verify required parameter 'Password' is not null or undefined
            if (Password === null || Password === undefined) {
                throw new RequiredError('Password','Required parameter Password was null or undefined when calling addAccount.');
            }
            // verify required parameter 'Account' is not null or undefined
            if (Account === null || Account === undefined) {
                throw new RequiredError('Account','Required parameter Account was null or undefined when calling addAccount.');
            }
            const localVarPath = `/MailManagement/AddMailAccount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (Password !== undefined) {
                localVarQueryParameter['password'] = Password;
            }

            if (Account !== undefined) {
                localVarQueryParameter['account'] = Account;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete mail account to mail server \"user@world.com\" 
         * @summary Delete mail account
         * @param {string} Account The mail account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount(Account: string, options: any = {}): FetchArgs {
            // verify required parameter 'Account' is not null or undefined
            if (Account === null || Account === undefined) {
                throw new RequiredError('Account','Required parameter Account was null or undefined when calling deleteAccount.');
            }
            const localVarPath = `/MailManagement/DeleteMailAccount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (Account !== undefined) {
                localVarQueryParameter['account'] = Account;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get mail accounts
         * @summary Get mail accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailAccounts(options: any = {}): FetchArgs {
            const localVarPath = `/MailManagement/MailAccounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset
         * @summary Reset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetbase(options: any = {}): FetchArgs {
            const localVarPath = `/MailManagement/Reset`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MailManagementApi - functional programming interface
 * @export
 */
export const MailManagementApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add mail account to mail server (e.g. \"user@world.com\") 
         * @summary Add mail account
         * @param {string} Password The mail account password
         * @param {string} Account The mail account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccount(Password: string, Account: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AddMailAccountResult> {
            const localVarFetchArgs = MailManagementApiFetchParamCreator(configuration).addAccount(Password, Account, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete mail account to mail server \"user@world.com\" 
         * @summary Delete mail account
         * @param {string} Account The mail account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount(Account: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DeleteMailAccountResult> {
            const localVarFetchArgs = MailManagementApiFetchParamCreator(configuration).deleteAccount(Account, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get mail accounts
         * @summary Get mail accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailAccounts(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MailAccountsResult> {
            const localVarFetchArgs = MailManagementApiFetchParamCreator(configuration).mailAccounts(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Reset
         * @summary Reset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetbase(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResetResult> {
            const localVarFetchArgs = MailManagementApiFetchParamCreator(configuration).resetbase(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MailManagementApi - factory interface
 * @export
 */
export const MailManagementApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Add mail account to mail server (e.g. \"user@world.com\") 
         * @summary Add mail account
         * @param {string} Password The mail account password
         * @param {string} Account The mail account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccount(Password: string, Account: string, options?: any) {
            return MailManagementApiFp(configuration).addAccount(Password, Account, options)(fetch, basePath);
        },
        /**
         * Delete mail account to mail server \"user@world.com\" 
         * @summary Delete mail account
         * @param {string} Account The mail account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount(Account: string, options?: any) {
            return MailManagementApiFp(configuration).deleteAccount(Account, options)(fetch, basePath);
        },
        /**
         * Get mail accounts
         * @summary Get mail accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailAccounts(options?: any) {
            return MailManagementApiFp(configuration).mailAccounts(options)(fetch, basePath);
        },
        /**
         * Reset
         * @summary Reset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetbase(options?: any) {
            return MailManagementApiFp(configuration).resetbase(options)(fetch, basePath);
        },
    };
};

/**
 * MailManagementApi - object-oriented interface
 * @export
 * @class MailManagementApi
 * @extends {BaseAPI}
 */
export class MailManagementApi extends BaseAPI {
    /**
     * Add mail account to mail server (e.g. \"user@world.com\") 
     * @summary Add mail account
     * @param {string} Password The mail account password
     * @param {string} Account The mail account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailManagementApi
     */
    public addAccount(Password: string, Account: string, options?: any) {
        return MailManagementApiFp(this.configuration).addAccount(Password, Account, options)(this.fetch, this.basePath);
    }

    /**
     * Delete mail account to mail server \"user@world.com\" 
     * @summary Delete mail account
     * @param {string} Account The mail account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailManagementApi
     */
    public deleteAccount(Account: string, options?: any) {
        return MailManagementApiFp(this.configuration).deleteAccount(Account, options)(this.fetch, this.basePath);
    }

    /**
     * Get mail accounts
     * @summary Get mail accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailManagementApi
     */
    public mailAccounts(options?: any) {
        return MailManagementApiFp(this.configuration).mailAccounts(options)(this.fetch, this.basePath);
    }

    /**
     * Reset
     * @summary Reset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailManagementApi
     */
    public resetbase(options?: any) {
        return MailManagementApiFp(this.configuration).resetbase(options)(this.fetch, this.basePath);
    }

}

